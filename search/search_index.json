{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Aurelius Atlas Thank you for your interest in the Aurelius Atlas Data Governance solution. Aurelius Atlas is an open-source data governance solution that enables business users to easily access governance information, meeting the demands of modern distributed data environments. This documentation provides an overview of the Aurelius Atlas solution, its architecture, and instructions on how to install and configure it. Accessing the Demo Aurelius Atlas is available as an online demo. To access the demo, click the button below: Go to the demo Note A Google account is required to access the demo. License Aurelius Atlas is an open-source solution available for use under the Elastic V2 license agreement.","title":"Home"},{"location":"#welcome-to-aurelius-atlas","text":"Thank you for your interest in the Aurelius Atlas Data Governance solution. Aurelius Atlas is an open-source data governance solution that enables business users to easily access governance information, meeting the demands of modern distributed data environments. This documentation provides an overview of the Aurelius Atlas solution, its architecture, and instructions on how to install and configure it.","title":"Welcome to Aurelius Atlas"},{"location":"#accessing-the-demo","text":"Aurelius Atlas is available as an online demo. To access the demo, click the button below: Go to the demo Note A Google account is required to access the demo.","title":"Accessing the Demo"},{"location":"#license","text":"Aurelius Atlas is an open-source solution available for use under the Elastic V2 license agreement.","title":"License"},{"location":"architecture/","text":"Architecture","title":"Architecture"},{"location":"architecture/#architecture","text":"","title":"Architecture"},{"location":"benefits-and-features/","text":"Benefits and Features By using Aurelius Atlas, you can: Empower Business Decisions Aurelius Atlas provides a comprehensive view of your data assets, enabling business users to make informed decisions based on the available data. Improve Efficiency The data catalog is designed for accessibility and ease of use, allowing users to quickly find the data they need, assess its fitness for purpose, and identify its stewards. Enhance Data Compliance Aurelius Atlas allows users to easily track data sensitivity, access requirements, and lineage, ensuring secure and compliant data usage. Guide Data Quality Improvements Built-in data quality impact analysis and profiling tools help users understand the quality of their data and identify areas for improvement. Execute Digital Strategy Aurelius Atlas provides a data governance platform that supports your digital strategy by enabling faster time-to-market for new data products and services and increasing access to existing data.","title":"Benefits and Features"},{"location":"benefits-and-features/#benefits-and-features","text":"By using Aurelius Atlas, you can:","title":"Benefits and Features"},{"location":"benefits-and-features/#empower-business-decisions","text":"Aurelius Atlas provides a comprehensive view of your data assets, enabling business users to make informed decisions based on the available data.","title":"Empower Business Decisions"},{"location":"benefits-and-features/#improve-efficiency","text":"The data catalog is designed for accessibility and ease of use, allowing users to quickly find the data they need, assess its fitness for purpose, and identify its stewards.","title":"Improve Efficiency"},{"location":"benefits-and-features/#enhance-data-compliance","text":"Aurelius Atlas allows users to easily track data sensitivity, access requirements, and lineage, ensuring secure and compliant data usage.","title":"Enhance Data Compliance"},{"location":"benefits-and-features/#guide-data-quality-improvements","text":"Built-in data quality impact analysis and profiling tools help users understand the quality of their data and identify areas for improvement.","title":"Guide Data Quality Improvements"},{"location":"benefits-and-features/#execute-digital-strategy","text":"Aurelius Atlas provides a data governance platform that supports your digital strategy by enabling faster time-to-market for new data products and services and increasing access to existing data.","title":"Execute Digital Strategy"},{"location":"getting-started/","text":"Getting Started","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"installation-and-deployment/","text":"Installation and Deployment Aurelius Atlas is distributed as a Helm chart. This allows for easy installation and deployment on any cloud provider or on-premises Kubernetes cluster. Tip For users who want to try out Aurelius Atlas without setting up a Kubernetes cluster, a Docker Compose file is also provided. Do not use the Docker Compose distribution for production deployments. All distributions of Aurelius Atlas are available on GitHub: Get the Helm chart Get the Docker Compose Infrastructure Requirements The following are the infrastructure requirements for deploying Aurelius Atlas: Kubernetes Cluster For an on-premises Kubernetes cluster, the system requirements are: Resource Specification Node Count 2 CPU Cores 4 RAM 16 GB Disk Space 100 GB Azure For Azure, the recommended system requirements are: Resource Specification Node Count 2 CPU Cores 4 RAM 16 GB Disk Space 100 GB Google Cloud For Google Cloud, the recommended system requirements are: Resource Specification Node Count 2 CPU Cores 4 RAM 16 GB Disk Space 100 GB Docker Compose For a local deployment, the recommended system requirements are: Resource Specification CPU Cores 4 RAM 32 GB Disk Space 100 GB Prerequisites Before you begin the installation process, ensure that you have the following prerequisites: Kubernetes Cluster Please ensure you have the following prerequisites for a deployment on a Kubernetes cluster: Helm installed kubectl installed Azure Please ensure you have the following prerequisites for a deployment on Azure: An Azure account Azure CLI installed kubectl installed Google Cloud Please ensure you have the following prerequisites for a deployment on Google Cloud: A Google Cloud account Google Cloud SDK installed kubectl installed A registered domain name for the Ingress controller Docker Compose Please ensure you have the following prerequisites for a local deployment: Docker installed First Time Installation Once you have your cluster and prerequisites set up, you can install Aurelius Atlas using the Helm chart or Docker Compose. The following sections will guide you through the process. Configuration Manager Aurelius Atlas recommends Reflector for managing the configuration of the Kubernetes cluster. To install Reflector, run the following commands: helm repo add emberstack https://emberstack.github.io/helm-charts helm repo update helm upgrade --install reflector emberstack/reflector Certificate Manager and Issuer To secure your deployment, Aurelius Atlas requires TLS certificates for your domain. Follow the steps below to set up the certificate manager and issuer. Set Up Certificate Manager First, you need to install a certificate manager to manage the TLS certificates for your domain. Tip If your organization already has a certificate manager set up, you can use it and skip this step. Please note that you will need to provide your certificate manager's details in later steps. Aurelius Atlas recommends using cert-manager for managing TLS certificates in Kubernetes. To install cert-manager, run the following commands: helm repo add jetstack https://charts.jetstack.io helm repo update helm install cert-manager jetstack/cert-manager \\ --namespace cert-manager \\ --create-namespace \\ --version v1.15 \\ --set installCRDs=true \\ --set global.leaderElection.namespace=cert-manager On successful installation, you should see the following output: NOTES: cert-manager v1.15 has been deployed successfully Note Please use a version of cert-manager that is compatible with your Kubernetes cluster. You can find the compatibility matrix here . Set Up Issuer Next, you need to set up an issuer to issue the TLS certificates for your domain. Aurelius Atlas recommends using the letsencrypt-prod issuer for production deployments. The helm chart includes a default configuration for the letsencrypt-prod issuer. To set up the issuer with the default configuration, follow these steps: Uncomment the content of the templates/prod_issuer.yaml file in the Helm chart. Update {{ .Values.ingress.email_address }} in the values.yaml file with your email address. Next, run the following command to install the issuer: helm template -s templates/prod_issuer.yaml . | kubectl apply -f - This sets up the letsencrypt-prod issuer with the default configuration in the cert-manager namespace. To verify that the issuer is set up correctly, run the following command: kubectl get clusterissuer -n cert-manager You should see the letsencrypt-prod issuer in the list of cluster issuers with a status of Ready . NAME READY AGE letsencrypt-clusterissuer-aurelius-atlas True 24h Ingress Controller Next, you need to set up an ingress controller to route external traffic to your services. Tip If your organization already has an ingress controller set up, you can use it and skip this step. Please note that you will need to provide your ingress controller's details in later steps. Set Up Ingress Controller Aurelius Atlas recommends using an NGINX ingress controller . To install the ingress controller, follow the steps below: Kubernetes Cluster To install the NGINX ingress controller on a Kubernetes cluster, run the following commands: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx helm repo update helm install nginx-ingress ingress-nginx/ingress-nginx \\ --set controller.publishService.enabled=true Azure To install the NGINX ingress controller on Azure, run the following commands: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx helm repo update helm install nginx-ingress ingress-nginx/ingress-nginx \\ --set controller.publishService.enabled=true \\ --set controller.service.annotations.\"service\\.beta\\.kubernetes\\.io/azure-load-balancer-health-probe-request-path\"=/healthz --set controller.service.annotations.\"service\\.beta\\.kubernetes\\.io/azure-dns-label-name\"=<label> Note Replace <label> with a DNS label name for the Azure Load Balancer. This label name should be unique within the Azure region. For example, if you use the label aurelius-atlas , the Load Balancer's DNS name will be aurelius-atlas.<region>.cloudapp.azure.com . Google Cloud To install the NGINX ingress controller on Google Cloud, run the following commands: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx helm repo update helm install nginx-ingress ingress-nginx/ingress-nginx \\ --set controller.publishService.enabled=true Docker Compose You can skip this step when making a local deployment. Set Up Certificate Next, you need to set up a certificate for the ingress controller. To do this, follow the steps below: Uncomment the content of the templates/certificate.yaml file in the Helm chart. Update {{ .Values.ingress.dns_url }} in the values.yaml file with your DNS name. Next, run the following command to install the certificate: helm template -s templates/certificate.yaml . | kubectl apply -f - This sets up the certificate for the ingress controller. To verify that the certificate is set up correctly, run the following command: kubectl get certificate -n cert-manager You should see the certificate in the list of certificates with a status of Ready . NAME READY AGE aurelius-atlas-ingress-cert True 24h Elastic Cloud Aurelius Atlas uses Elastic Cloud on Kubernetes (ECK) to manage its internal Elasticsearch cluster. To set up ECK, run the following commands: kubectl create -f https://download.elastic.co/downloads/eck/2.13.0/crds.yaml kubectl apply -f https://download.elastic.co/downloads/eck/2.13.0/operator.yaml Note Please use a version of ECK that is compatible with your Kubernetes cluster. The ECK docs provide a list of supported versions here . Zookeeper Aurelius Atlas internally relies on Zookeeper. Please ensure that the Zookeeper dependencies are updated by running the following commands: cd charts/zookeeper/ helm dependency update Deploying Aurelius Atlas Once you have set up the prerequisites and configured the necessary components, you are ready to deploy Aurelius Atlas. Configure Values Before deploying Aurelius Atlas, you need to configure the values in the values.yaml file. The values.yaml file contains the configuration settings for Aurelius Atlas. The following are the key configuration settings that you need to update: Key Description {{ .Values.keycloak.keycloakFrontendURL}} Set this to your DNS name. {{ .Values.post_install.upload_data }} Set this to true to upload sample data. Tip Aurelius Atlas ships with sample data that you can us to explore the platform. To load the sample data, set {{ .Values.post_install.upload_data }} to true . Deploy Helm Chart To deploy Aurelius Atlas using the Helm chart, run the following commands: helm dependency update helm install --generate-name -n <namespace> -f values.yaml --wait --timeout 15m0s . Note Replace <namespace> with the namespace where you want to deploy Aurelius Atlas. Accessing Aurelius Atlas Once the deployment is complete, you can access Aurelius Atlas using the DNS name you configured earlier. To access the platform, open a web browser and navigate to https://<dns-name>/<namespace>/atlas/ . Note Replace <dns-name> with the DNS name you configured earlier, and <namespace> with the namespace where you deployed Aurelius Atlas. Default Credentials By default, the helm chart creates the following users: User type Username Aurelius Atlas Admin atlas Elasticsearch Admin elastic Keycloak Admin admin Aurelius Atlas Data Steward (demo only) steward Aurelius Atlas Data Scientist (demo only) scientist The credentials for each user are randomized and stored in a Kubernetes secret. The helm chart includes a script to retrieve the passwords for each user. To retrieve the passwords, run the following command: ./get_passwords.sh <namespace> This script will print the passwords for each user to the console.","title":"Installation and Deployment"},{"location":"installation-and-deployment/#installation-and-deployment","text":"Aurelius Atlas is distributed as a Helm chart. This allows for easy installation and deployment on any cloud provider or on-premises Kubernetes cluster. Tip For users who want to try out Aurelius Atlas without setting up a Kubernetes cluster, a Docker Compose file is also provided. Do not use the Docker Compose distribution for production deployments. All distributions of Aurelius Atlas are available on GitHub: Get the Helm chart Get the Docker Compose","title":"Installation and Deployment"},{"location":"installation-and-deployment/#infrastructure-requirements","text":"The following are the infrastructure requirements for deploying Aurelius Atlas: Kubernetes Cluster For an on-premises Kubernetes cluster, the system requirements are: Resource Specification Node Count 2 CPU Cores 4 RAM 16 GB Disk Space 100 GB Azure For Azure, the recommended system requirements are: Resource Specification Node Count 2 CPU Cores 4 RAM 16 GB Disk Space 100 GB Google Cloud For Google Cloud, the recommended system requirements are: Resource Specification Node Count 2 CPU Cores 4 RAM 16 GB Disk Space 100 GB Docker Compose For a local deployment, the recommended system requirements are: Resource Specification CPU Cores 4 RAM 32 GB Disk Space 100 GB","title":"Infrastructure Requirements"},{"location":"installation-and-deployment/#prerequisites","text":"Before you begin the installation process, ensure that you have the following prerequisites: Kubernetes Cluster Please ensure you have the following prerequisites for a deployment on a Kubernetes cluster: Helm installed kubectl installed Azure Please ensure you have the following prerequisites for a deployment on Azure: An Azure account Azure CLI installed kubectl installed Google Cloud Please ensure you have the following prerequisites for a deployment on Google Cloud: A Google Cloud account Google Cloud SDK installed kubectl installed A registered domain name for the Ingress controller Docker Compose Please ensure you have the following prerequisites for a local deployment: Docker installed","title":"Prerequisites"},{"location":"installation-and-deployment/#first-time-installation","text":"Once you have your cluster and prerequisites set up, you can install Aurelius Atlas using the Helm chart or Docker Compose. The following sections will guide you through the process.","title":"First Time Installation"},{"location":"installation-and-deployment/#configuration-manager","text":"Aurelius Atlas recommends Reflector for managing the configuration of the Kubernetes cluster. To install Reflector, run the following commands: helm repo add emberstack https://emberstack.github.io/helm-charts helm repo update helm upgrade --install reflector emberstack/reflector","title":"Configuration Manager"},{"location":"installation-and-deployment/#certificate-manager-and-issuer","text":"To secure your deployment, Aurelius Atlas requires TLS certificates for your domain. Follow the steps below to set up the certificate manager and issuer.","title":"Certificate Manager and Issuer"},{"location":"installation-and-deployment/#set-up-certificate-manager","text":"First, you need to install a certificate manager to manage the TLS certificates for your domain. Tip If your organization already has a certificate manager set up, you can use it and skip this step. Please note that you will need to provide your certificate manager's details in later steps. Aurelius Atlas recommends using cert-manager for managing TLS certificates in Kubernetes. To install cert-manager, run the following commands: helm repo add jetstack https://charts.jetstack.io helm repo update helm install cert-manager jetstack/cert-manager \\ --namespace cert-manager \\ --create-namespace \\ --version v1.15 \\ --set installCRDs=true \\ --set global.leaderElection.namespace=cert-manager On successful installation, you should see the following output: NOTES: cert-manager v1.15 has been deployed successfully Note Please use a version of cert-manager that is compatible with your Kubernetes cluster. You can find the compatibility matrix here .","title":"Set Up Certificate Manager"},{"location":"installation-and-deployment/#set-up-issuer","text":"Next, you need to set up an issuer to issue the TLS certificates for your domain. Aurelius Atlas recommends using the letsencrypt-prod issuer for production deployments. The helm chart includes a default configuration for the letsencrypt-prod issuer. To set up the issuer with the default configuration, follow these steps: Uncomment the content of the templates/prod_issuer.yaml file in the Helm chart. Update {{ .Values.ingress.email_address }} in the values.yaml file with your email address. Next, run the following command to install the issuer: helm template -s templates/prod_issuer.yaml . | kubectl apply -f - This sets up the letsencrypt-prod issuer with the default configuration in the cert-manager namespace. To verify that the issuer is set up correctly, run the following command: kubectl get clusterissuer -n cert-manager You should see the letsencrypt-prod issuer in the list of cluster issuers with a status of Ready . NAME READY AGE letsencrypt-clusterissuer-aurelius-atlas True 24h","title":"Set Up Issuer"},{"location":"installation-and-deployment/#ingress-controller","text":"Next, you need to set up an ingress controller to route external traffic to your services. Tip If your organization already has an ingress controller set up, you can use it and skip this step. Please note that you will need to provide your ingress controller's details in later steps.","title":"Ingress Controller"},{"location":"installation-and-deployment/#set-up-ingress-controller","text":"Aurelius Atlas recommends using an NGINX ingress controller . To install the ingress controller, follow the steps below: Kubernetes Cluster To install the NGINX ingress controller on a Kubernetes cluster, run the following commands: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx helm repo update helm install nginx-ingress ingress-nginx/ingress-nginx \\ --set controller.publishService.enabled=true Azure To install the NGINX ingress controller on Azure, run the following commands: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx helm repo update helm install nginx-ingress ingress-nginx/ingress-nginx \\ --set controller.publishService.enabled=true \\ --set controller.service.annotations.\"service\\.beta\\.kubernetes\\.io/azure-load-balancer-health-probe-request-path\"=/healthz --set controller.service.annotations.\"service\\.beta\\.kubernetes\\.io/azure-dns-label-name\"=<label> Note Replace <label> with a DNS label name for the Azure Load Balancer. This label name should be unique within the Azure region. For example, if you use the label aurelius-atlas , the Load Balancer's DNS name will be aurelius-atlas.<region>.cloudapp.azure.com . Google Cloud To install the NGINX ingress controller on Google Cloud, run the following commands: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx helm repo update helm install nginx-ingress ingress-nginx/ingress-nginx \\ --set controller.publishService.enabled=true Docker Compose You can skip this step when making a local deployment.","title":"Set Up Ingress Controller"},{"location":"installation-and-deployment/#set-up-certificate","text":"Next, you need to set up a certificate for the ingress controller. To do this, follow the steps below: Uncomment the content of the templates/certificate.yaml file in the Helm chart. Update {{ .Values.ingress.dns_url }} in the values.yaml file with your DNS name. Next, run the following command to install the certificate: helm template -s templates/certificate.yaml . | kubectl apply -f - This sets up the certificate for the ingress controller. To verify that the certificate is set up correctly, run the following command: kubectl get certificate -n cert-manager You should see the certificate in the list of certificates with a status of Ready . NAME READY AGE aurelius-atlas-ingress-cert True 24h","title":"Set Up Certificate"},{"location":"installation-and-deployment/#elastic-cloud","text":"Aurelius Atlas uses Elastic Cloud on Kubernetes (ECK) to manage its internal Elasticsearch cluster. To set up ECK, run the following commands: kubectl create -f https://download.elastic.co/downloads/eck/2.13.0/crds.yaml kubectl apply -f https://download.elastic.co/downloads/eck/2.13.0/operator.yaml Note Please use a version of ECK that is compatible with your Kubernetes cluster. The ECK docs provide a list of supported versions here .","title":"Elastic Cloud"},{"location":"installation-and-deployment/#zookeeper","text":"Aurelius Atlas internally relies on Zookeeper. Please ensure that the Zookeeper dependencies are updated by running the following commands: cd charts/zookeeper/ helm dependency update","title":"Zookeeper"},{"location":"installation-and-deployment/#deploying-aurelius-atlas","text":"Once you have set up the prerequisites and configured the necessary components, you are ready to deploy Aurelius Atlas.","title":"Deploying Aurelius Atlas"},{"location":"installation-and-deployment/#configure-values","text":"Before deploying Aurelius Atlas, you need to configure the values in the values.yaml file. The values.yaml file contains the configuration settings for Aurelius Atlas. The following are the key configuration settings that you need to update: Key Description {{ .Values.keycloak.keycloakFrontendURL}} Set this to your DNS name. {{ .Values.post_install.upload_data }} Set this to true to upload sample data. Tip Aurelius Atlas ships with sample data that you can us to explore the platform. To load the sample data, set {{ .Values.post_install.upload_data }} to true .","title":"Configure Values"},{"location":"installation-and-deployment/#deploy-helm-chart","text":"To deploy Aurelius Atlas using the Helm chart, run the following commands: helm dependency update helm install --generate-name -n <namespace> -f values.yaml --wait --timeout 15m0s . Note Replace <namespace> with the namespace where you want to deploy Aurelius Atlas.","title":"Deploy Helm Chart"},{"location":"installation-and-deployment/#accessing-aurelius-atlas","text":"Once the deployment is complete, you can access Aurelius Atlas using the DNS name you configured earlier. To access the platform, open a web browser and navigate to https://<dns-name>/<namespace>/atlas/ . Note Replace <dns-name> with the DNS name you configured earlier, and <namespace> with the namespace where you deployed Aurelius Atlas.","title":"Accessing Aurelius Atlas"},{"location":"installation-and-deployment/#default-credentials","text":"By default, the helm chart creates the following users: User type Username Aurelius Atlas Admin atlas Elasticsearch Admin elastic Keycloak Admin admin Aurelius Atlas Data Steward (demo only) steward Aurelius Atlas Data Scientist (demo only) scientist The credentials for each user are randomized and stored in a Kubernetes secret. The helm chart includes a script to retrieve the passwords for each user. To retrieve the passwords, run the following command: ./get_passwords.sh <namespace> This script will print the passwords for each user to the console.","title":"Default Credentials"},{"location":"integrations/","text":"Integrations","title":"Integrations"},{"location":"integrations/#integrations","text":"","title":"Integrations"},{"location":"support-and-maintenance/","text":"Support and Maintenance","title":"Support and Maintenance"},{"location":"support-and-maintenance/#support-and-maintenance","text":"","title":"Support and Maintenance"},{"location":"user-guide/","text":"User Guide","title":"User Guide"},{"location":"user-guide/#user-guide","text":"","title":"User Guide"}]}